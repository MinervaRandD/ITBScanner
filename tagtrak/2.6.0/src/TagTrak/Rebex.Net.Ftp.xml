<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rebex.Net.Ftp</name>
    </assembly>
    <members>
        <member name="T:Rebex.Net.FtpControl">
            <summary>
            Handles all control channel communication with an FTP server.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpData">
            <summary>
            Base class for FTP data transfers.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpResponseReadEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Rebex.Net.Ftp.ResponseRead">ResponseRead</see> event of a <see cref="T:Rebex.Net.Ftp"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Rebex.Net.FtpResponseReadEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Rebex.Net.FtpCommandSentEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Rebex.Net.Ftp.CommandSent">CommandSent</see> event of a <see cref="T:Rebex.Net.Ftp"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Rebex.Net.FtpCommandSentEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Rebex.Net.FtpStateChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Rebex.Net.Ftp.StateChanged">StateChanged</see> event of a <see cref="T:Rebex.Net.Ftp"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Rebex.Net.FtpStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Rebex.Net.FtpTransferProgressEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Rebex.Net.Ftp.TransferProgress">TransferProgress</see> event of a <see cref="T:Rebex.Net.Ftp"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Rebex.Net.FtpTransferProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Rebex.Net.FtpItemParseEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Rebex.Net.FtpItem.ItemParse">ItemParse</see> event  of a <see cref="T:Rebex.Net.FtpItem"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Rebex.Net.FtpItemParseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Rebex.Net.FtpResponseReadEventArgs">
            <summary>
            Provides data for the <see cref="E:Rebex.Net.Ftp.ResponseRead">ResponseRead</see> event.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpResponseReadEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpResponseReadEventArgs"/> class with the specified response string.
            </summary>
            <param name="response">The raw response line that was read.</param>
        </member>
        <member name="P:Rebex.Net.FtpResponseReadEventArgs.Response">
            <summary>
            Gets the raw FTP response.
            </summary>
            <value>The raw FTP response.</value>
        </member>
        <member name="T:Rebex.Net.FtpCommandSentEventArgs">
            <summary>
            Provides data for the <see cref="E:Rebex.Net.Ftp.CommandSent">CommandSent</see> event.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpCommandSentEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpCommandSentEventArgs"/> class with the specified command string.
            </summary>
            <param name="command">The command that was sent.</param>
        </member>
        <member name="P:Rebex.Net.FtpCommandSentEventArgs.Command">
            <summary>
            Gets the command string.
            </summary>
            <value>The command string.</value>
        </member>
        <member name="T:Rebex.Net.FtpStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Rebex.Net.Ftp.StateChanged">StateChanged</see> event.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpStateChangedEventArgs.#ctor(Rebex.Net.FtpState,Rebex.Net.FtpState)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpStateChangedEventArgs"/> class with the specified old state and new state.
            </summary>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="P:Rebex.Net.FtpStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>The state that was changed.</value>
        </member>
        <member name="P:Rebex.Net.FtpStateChangedEventArgs.NewState">
            <summary>
            Gets the new state.
            </summary>
            <value>The new and current state.</value>
        </member>
        <member name="T:Rebex.Net.FtpTransferProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Rebex.Net.Ftp.TransferProgress">TransferProgress</see> event.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpTransferProgressEventArgs.#ctor(Rebex.Net.FtpTransferState,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpTransferProgressEventArgs"/> class with the specified state and number of bytes transfered.
            </summary>
            <param name="state">Current state.</param>
            <param name="bytesTransfered">Number of bytes transfered. Ignored if <b>state</b> is <see cref="T:Rebex.Net.FtpTransferState">FtpTransferState.None</see>.</param>
        </member>
        <member name="P:Rebex.Net.FtpTransferProgressEventArgs.State">
            <summary>
            Gets the transfer state.
            </summary>
            <value>The transfer state.</value>
        </member>
        <member name="P:Rebex.Net.FtpTransferProgressEventArgs.BytesTransfered">
            <summary>
            Gets the number of bytes transfered.
            </summary>
            <value>The number of bytes transfered</value>
        </member>
        <member name="T:Rebex.Net.FtpItemParseEventArgs">
            <summary>
            Provides data for the <see cref="E:Rebex.Net.FtpItem.ItemParse">ItemParse</see> event.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpItemParseEventArgs.#ctor(System.String,Rebex.Net.FtpItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpItemParseEventArgs"/> class with the specified raw data and a parsed item.
            </summary>
            <param name="rawLine">Raw data of the line parsed.</param>
            <param name="item">Parsed <see cref="T:Rebex.Net.FtpItem"/> or <b>null</b> reference if unable to parse.</param>
            <remarks>
            This provides support for custom list parsing. Custom parser delegate can
            inspect the rawLine parameter and set <see cref="P:Rebex.Net.FtpItemParseEventArgs.Item"/> property to a new <see cref="T:Rebex.Net.FtpItem"/> instance.
            </remarks>
        </member>
        <member name="P:Rebex.Net.FtpItemParseEventArgs.RawLine">
            <summary>
            Gets the raw data of the line parsed.
            </summary>
            <value>The raw data of the line parsed.</value>
        </member>
        <member name="P:Rebex.Net.FtpItemParseEventArgs.Item">
            <summary>
            Gets or sets the parsed <see cref="T:Rebex.Net.FtpItem"/>.
            </summary>
            <value>The parsed <see cref="T:Rebex.Net.FtpItem"/> or <b>null</b> if unable to parse.</value>
        </member>
        <member name="T:Rebex.Net.FtpExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:Rebex.Net.FtpException"/> class.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ConnectFailure">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.SocketError">
            <summary>
            The error at transport level occured.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.NameResolutionFailure">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.Pending">
            <summary>
            An operation is pending.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an FTP protocol error such as 550 Access Denied would use this status.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ProxyNameResolutionFailure">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.OperationAborted">
            <summary>
            The operation was aborted by a call to the <see cref="M:Rebex.Net.Ftp.Abort"/> method.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.UnclassifiableError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:Rebex.Net.FtpException.Status"/>.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.SendFailure">
            <summary>
            A complete request could not be sent to the remote server.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.ServerProtocolViolation">
            <summary>
            The server response was not a valid FTP response.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpException">
            <summary>
            The exception that is thrown when an error occurs while using Ftp component.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message">Message</see> property of the new instance to a message that describes the general error.</remarks>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor(System.String,Rebex.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:Rebex.Net.FtpExceptionStatus"/> values.</param>
            <remarks>The status must not be <see cref="T:Rebex.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:Rebex.Net.FtpException.#ctor(Rebex.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor(System.String,System.Exception,Rebex.Net.FtpExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
            <param name="status">One of the <see cref="T:Rebex.Net.FtpExceptionStatus"/> values.</param>
            <remarks>The status must not be <see cref="T:Rebex.Net.FtpExceptionStatus">ProtocolError</see>. Use <see cref="M:Rebex.Net.FtpException.#ctor(Rebex.Net.FtpResponse)">FtpException (FtpResponse response)</see> constructor for creating protocol error exceptions.</remarks>
        </member>
        <member name="M:Rebex.Net.FtpException.#ctor(Rebex.Net.FtpResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpException"/> class with the specified <see cref="T:Rebex.Net.FtpResponse"/>.
            </summary>
            <param name="response">The <see cref="T:Rebex.Net.FtpResponse"/>.</param>
        </member>
        <member name="P:Rebex.Net.FtpException.Status">
            <summary>
            Gets the status of the response.
            </summary>
            <value>One of the <see cref="T:Rebex.Net.FtpExceptionStatus"/> values.</value>
        </member>
        <member name="P:Rebex.Net.FtpException.Response">
            <summary>
            Gets the <see cref="T:Rebex.Net.FtpResponse"/> if the exception.
            </summary>
            <value>The <see cref="T:Rebex.Net.FtpResponse"/> if <see cref="P:Rebex.Net.FtpException.Status"/> is <see cref="T:Rebex.Net.FtpExceptionStatus">ProtocolError</see>; <b>null</b> reference otherwise.</value>
        </member>
        <member name="P:Rebex.Net.FtpException.Transfered">
            <summary>
            Gets the amount od data transfered before the exception occured.
            </summary>
            <value>The amount od data transfered before the exception occured.</value>
        </member>
        <member name="T:Rebex.Net.FtpItemType">
            <summary>
            Type of <see cref="T:Rebex.Net.FtpItem"/>.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpItemType.File">
            <summary>File</summary>
        </member>
        <member name="F:Rebex.Net.FtpItemType.Directory">
            <summary>Directory</summary>
        </member>
        <member name="F:Rebex.Net.FtpItemType.Symlink">
            <summary>Symlink</summary>
        </member>
        <member name="T:Rebex.Net.FtpItem">
            <summary>
            Contains information about a single file or directory on the FTP server.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpItem.#ctor(System.String,System.Int64,Rebex.Net.FtpItemType,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpItem"/> class.
            </summary>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="lastModified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
        </member>
        <member name="M:Rebex.Net.FtpItem.#ctor(System.String,System.Int64,Rebex.Net.FtpItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpItem"/> class.
            </summary>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
        </member>
        <member name="M:Rebex.Net.FtpItem.#ctor(Rebex.Net.FtpItemSystem,System.String,System.Int64,Rebex.Net.FtpItemType,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpItem"/> class.
            </summary>
            <param name="system">The type of the item.</param>
            <param name="filename">The name of the file or directory.</param>
            <param name="size">The size of the file.</param>
            <param name="type">The type of item.</param>
            <param name="lastModified">The <see cref="T:System.DateTime"/> of last modification.</param>
            <param name="symlinkPath">The path this item points to if it is symlink.</param>
        </member>
        <member name="M:Rebex.Net.FtpItem.Parse(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Rebex.Net.FtpItem"/> class and initializes it with file info from a raw FTP list line.
            </summary>
            <param name="rawLine">A raw FTP list line.</param>
            <returns>An instance of <see cref="T:Rebex.Net.FtpItem"/> or a null reference if unable to parse.</returns>
        </member>
        <member name="P:Rebex.Net.FtpItem.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
            <value>The name of the file or directory.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.Type">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.SymlinkPath">
            <summary>
            Gets the path this item points to if it is symlink, null otherwise.
            </summary>
            <value>The path this item points to if it is symlink, null otherwise.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.Size">
            <summary>
            Gets the size of the file.
            </summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.IsDirectory">
            <summary>
            Gets the flag indicating whether the item might be a directory.
            </summary>
            <value>True if the item might be a directory.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.IsFile">
            <summary>
            Gets the flag indicating whether the item might be a file.
            </summary>
            <value>True if the item might be a file.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.IsSymlink">
            <summary>
            Gets the flag indicating whether the item is a symlink.
            </summary>
            <value>True if the item is a symlink.</value>
        </member>
        <member name="P:Rebex.Net.FtpItem.Modified">
            <summary>
            Returns the <see cref="T:System.DateTime"/> of last modification.
            </summary>
            <value>The <see cref="T:System.DateTime"/> of last modification.</value>
        </member>
        <member name="E:Rebex.Net.FtpItem.ItemParse">
            <summary>
            Occurs when an item is being parsed.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpList">
            <summary>
            Provides a container for a collection of <see cref="T:Rebex.Net.FtpItem"/> objects.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpList"/> class.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpList.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpList"/> class with the specified file list.
            </summary>
            <param name="rawList">The unparsed FTP file list.</param>
        </member>
        <member name="M:Rebex.Net.FtpList.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:Rebex.Net.FtpList"/>.</returns>
            <remarks>
            A shallow copy of a collection copies only the elements
            of the collection, whether they are reference types or value
            types, but it does not copy the objects that the references
            refer to. The references in the new collection point to the same
            objects that the references in the original collection point to.
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Rebex.Net.FtpList"/>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>.</returns>
            <remarks>GetEnumerator is the method that implements the foreach statement (For Each in Visual Basic). You should not need to call this method directly.</remarks>
        </member>
        <member name="M:Rebex.Net.FtpList.Add(Rebex.Net.FtpItem)">
            <summary>
            Adds the <see cref="T:Rebex.Net.FtpItem"/> to the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <param name="item">The <see cref="T:Rebex.Net.FtpItem"/> to be added to the <see cref="T:Rebex.Net.FtpList"/>.</param>
        </member>
        <member name="M:Rebex.Net.FtpList.Remove(Rebex.Net.FtpItem)">
            <summary>
            Removes the specified <see cref="T:Rebex.Net.FtpItem"/> from the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <param name="item">The <see cref="T:Rebex.Net.FtpItem"/> to remove from the <see cref="T:Rebex.Net.FtpList"/>.</param>
        </member>
        <member name="M:Rebex.Net.FtpList.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Rebex.Net.FtpItem"/> with the specified name from the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <param name="name">The name of <see cref="T:Rebex.Net.FtpItem"/> to remove from the <see cref="T:Rebex.Net.FtpList"/>.</param>
        </member>
        <member name="M:Rebex.Net.FtpList.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:Rebex.Net.FtpItem"/> at the specified index from the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <param name="i">The zero-based index of the <see cref="T:Rebex.Net.FtpItem"/> to remove.</param>
        </member>
        <member name="M:Rebex.Net.FtpList.GetTotalSize">
            <summary>
            Gets the total size of files contained in the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <returns>The total size of files contained it the <see cref="T:Rebex.Net.FtpList"/>.</returns>
        </member>
        <member name="M:Rebex.Net.FtpList.GetFiles(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the names of files in the <see cref="T:Rebex.Net.FtpList"/> that match the specified search pattern.
            </summary>
            <param name="regExp">The regular expression to match the names against.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Rebex.Net.FtpList.GetFiles(System.String,System.Boolean)">
            <summary>
            Returns the names of files in the <see cref="T:Rebex.Net.FtpList"/> that match the specified search pattern.
            </summary>
            <param name="searchPattern">The search string to match the items against.</param>
            <param name="caseSensitive">If tree, perform unix-like case-sensitive matching.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            <p>The following wildcard specifiers are permitted in <i>searchPattern</i>:<br/>
            <b>*</b> - Zero or more characters.<br/>
            <b>?</b> - Exactly one character.<br/>
            Characters other than the wild card specifiers represent themselves.
            For example, the searchPattern string "*t" searches for all names in path
            ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s".
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpList.GetFiles(System.String)">
            <summary>
            Returns the names of files in the <see cref="T:Rebex.Net.FtpList"/> that match the specified search pattern.
            </summary>
            <param name="searchPattern">The search string to match the items against.</param>
            <returns>A <see cref="T:System.String"/> array containing the names of files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            <p>The following wildcard specifiers are permitted in <i>searchPattern</i>:<br/>
            <b>*</b> - Zero or more characters.<br/>
            <b>?</b> - Exactly one character.<br/>
            Characters other than the wild card specifiers represent themselves.
            For example, the searchPattern string "*t" searches for all names in path
            ending with the letter "t". The searchPattern string "s*" searches for all
            names in path beginning with the letter "s".
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpList.Sort">
            <summary>
            Sorts the items in the entire <see cref="T:Rebex.Net.FtpList"/> alphabetically.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire <see cref="T:Rebex.Net.FtpList"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically</param>
            <remarks>This method uses <see cref="M:System.Array.Sort(System.Array)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="M:Rebex.Net.FtpList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of <see cref="T:Rebex.Net.FtpList"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, or a null reference to sort alphabetically.</param>
            <remarks>This method uses <see cref="M:System.Array.Sort(System.Array)"/>, which uses QuickSort algorithm. See its description for more information.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:Rebex.Net.FtpList"/>.</value>
        </member>
        <member name="P:Rebex.Net.FtpList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Rebex.Net.FtpList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:Rebex.Net.FtpList"/>.</value>
        </member>
        <member name="P:Rebex.Net.FtpList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Rebex.Net.FtpItem"/> at the specified index.
            </summary>
            <param name="i">The zero-based index of the <see cref="T:Rebex.Net.FtpItem"/> to get.</param>
            <value><see cref="T:Rebex.Net.FtpItem"/> of the specified index.</value>
        </member>
        <member name="P:Rebex.Net.FtpList.Item(System.String)">
            <summary>
            Gets the <see cref="T:Rebex.Net.FtpItem"/> of the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Rebex.Net.FtpItem"/> to get.</param>
            <value><see cref="T:Rebex.Net.FtpItem"/> of the specified name.</value>
        </member>
        <member name="T:Rebex.Net.Ftp">
            <summary>
            Provides methods for communication with FTP servers.
            </summary>
            <remarks>All members of this class are thread-safe.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.OnResponseRead(Rebex.Net.FtpResponseReadEventArgs)">
            <summary>
            Raises the <see cref="E:Rebex.Net.Ftp.ResponseRead"/> event.
            </summary>
            <param name="e">A <see cref="T:Rebex.Net.FtpResponseReadEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.OnCommandSent(Rebex.Net.FtpCommandSentEventArgs)">
            <summary>
            Raises the <see cref="E:Rebex.Net.Ftp.CommandSent"/> event.
            </summary>
            <param name="e">A <see cref="T:Rebex.Net.FtpCommandSentEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.OnStateChanged(Rebex.Net.FtpStateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Rebex.Net.Ftp.StateChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Rebex.Net.FtpStateChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.OnTransferProgress(Rebex.Net.FtpTransferProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Rebex.Net.Ftp.TransferProgress"/> event.
            </summary>
            <param name="e">A <see cref="T:Rebex.Net.FtpTransferProgressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.#ctor">
            <summary>
            Initializes a new instance of the Ftp class.
            </summary>
        </member>
        <member name="M:Rebex.Net.Ftp.Dispose">
            <summary>
            Disposes the <see cref="T:Rebex.Net.Ftp"/> object and all the socket objects.
            </summary>
            <remarks>
            Calling this method ensures that all resources are freed.
            It is not necessary to call this method if the FTP session is
            successfully closed using <see cref="M:Rebex.Net.Ftp.Disconnect">Disconnect</see> method.
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Rebex.Net.Ftp"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.Finalize">
            <summary>
            Finalizer. Called by garbage collector during object destruction.
            </summary>
        </member>
        <member name="M:Rebex.Net.Ftp.Disconnect">
            <summary>
            Informs the server that the connection is about to close and
            terminates the connection.
            </summary>
            <returns>The exit message returned by the server.</returns>
            <remarks>Represents FTP QUIT command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Rename(System.String,System.String)">
            <summary>
            Renames a file on the server.
            </summary>
            <param name="fromPath">The pathname of the remote file to be renamed.</param>
            <param name="toPath">The pathname to rename the file to.</param>
            <remarks>Represents FTP RNFR/RNTO command pair.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetRawList(System.String)">
            <summary>
            Retrieves the raw list of files and directories in the current server directory.
            </summary>
            <param name="arguments">Arguments for the LIST command.</param>
            <returns>The array of response lines.</returns>
            <remarks>
            <p>Represents FTP LIST command.</p>
            <p>
            Because the RFC does not define the format of the file list, this method
            is often useless. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            <p>
            <b>Caution:</b> The meaning of the <i>arguments</i> argument is not defined by RFC
            and varies from server to server. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with <i>arguments</i> other than null is not
            recommended and will make your code incompatible with many FTP servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetNameList(System.String)">
            <summary>
            Retrieves the list of names in the current server directory.
            </summary>
            <param name="arguments">Arguments for the NLST command.</param>
            <returns>An array of names.</returns>
            <remarks>
            <p>Represents FTP NLST command.</p>
            <p>
            Actual behaviour of NLST command varies from server to server,
            because the RFC is not clear in explaining what it should do. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            <p>
            <b>Caution:</b> The meaning of the <i>arguments</i> argument is not defined by RFC
            and varies from server to server. Some servers interpret it as parameters
            to ls command, some as a filename, some ignore it and some report an error.
            Calling this method with <i>arguments</i> other than null is not
            recommended and will make your code incompatible with many FTP servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFile(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>
            <p>Represents FTP RETR command.</p>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            Use <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see> to obtain the current working directory.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>
            <p>Represents FTP RETR command.</p>
            <p>If the specified local file does not exist, it is created; if it does exist and the local offset is greater than 0, the contents after the offset are overwritten.</p>
            <p>If the localOffset is less than or equal to zero and the file exists, it will be truncated to zero length before the transfer starts.</p>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            Use <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see> to obtain the current working directory.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutUniqueFile(System.IO.Stream)">
            <summary>
            Uploads the content of the stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <returns>Name of the newly created unique file on the server.</returns>
            <remarks>
            <p>Represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly (MS FTP).</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutUniqueFile(System.String)">
            <summary>
            Uploads the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <returns>Name of the newly created unique file on the server.</returns>
            <remarks>
            <p>Represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly (MS FTP).</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Login(System.String,System.String)">
            <summary>
            Authenticates the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <returns>The logon message returned by the remote server.</returns>
            <remarks>
            <p>Represents FTP USER/PASS command pair.</p>
            <p>For anonymous logins, use "anonymous" as a username and an email as a password.</p>
            <p>If userName is a <b>null</b> reference, "anonymous" is used. If password is a <b>null</b> reference, "guest" is used.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Logoff">
            <summary>
            Logoff the current user but do not close the connection.
            </summary>
            <remarks>
            <p>Represents FTP REIN command.</p>
            <p><see cref="M:Rebex.Net.Ftp.Login(System.String,System.String)"/> method can be called again after logoff.</p>
            <p><b>Caution:</b> This command is NOT needed to be called when closing connection - calling <see cref="M:Rebex.Net.Ftp.Disconnect">Disconnect</see> is enough.
            In fact, it is unsupported by some FTP servers and FTP proxies, so its usage
            is not recommended. Use <see cref="M:Rebex.Net.Ftp.Disconnect"/>/<see cref="M:Rebex.Net.Ftp.Connect(System.String,System.Int32)"/> instead.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Connect(System.String,System.Int32)">
            <summary>
            Connects to the FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <returns>The welcome message returned by the server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.SetTransferType(Rebex.Net.FtpTransferType)">
            <summary>
            Sets the data transfer type.
            </summary>
            <param name="transferType">Transfer type to set.</param>
            <remarks>
            <p>Represents FTP TYPE command.</p>
            <p>Setting this to <see cref="T:Rebex.Net.FtpTransferType">FtpTransferType.Binary</see> is highly recommended.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.SendCommand(System.String)">
            <summary>
            Executes a command on the FTP server.
            </summary>
            <param name="command">Command (eg. "HELP").</param>
            <remarks>
            <p>Must be followed by a call to <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> method.</p>
            <p>Use <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> and SendCommand to implement various custom USER commands.</p>
            <p>After a successful call to SendCommand, the <see cref="T:Rebex.Net.Ftp"/> object will be in <see cref="T:Rebex.Net.FtpState">Reading</see> state.</p>
            <p>The <see cref="T:Rebex.Net.Ftp"/> object <see cref="P:Rebex.Net.Ftp.State"/> must be <see cref="T:Rebex.Net.FtpState">Ready</see> or <see cref="T:Rebex.Net.FtpState">Processing</see> when calling this method.</p>		
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.ReadResponse">
            <summary>
            Returns the response of the FTP server to the command.
            </summary>
            <returns>Response of the FTP server.</returns>
            <remarks>
            <p>Must be preceeded by a call to <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)">SendCommand</see> method. (Or, more exactly, the <see cref="P:Rebex.Net.Ftp.State"/> must be <see cref="T:Rebex.Net.FtpState">Reading</see>.</p>
            <p>Use ReadResponse and <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)">SendCommand</see> to implement various custom USER commands.</p>
            <p>
            After a successful call to ReadResponse,
            the <see cref="T:Rebex.Net.Ftp"/> object will be in <see cref="T:Rebex.Net.FtpState">Processing</see> state if the response <see cref="P:Rebex.Net.FtpResponse.Group">Group</see> is 3,
            in <see cref="T:Rebex.Net.FtpState">Reading</see> state if the response <see cref="P:Rebex.Net.FtpResponse.Group">Group</see> is 1 or
            in <see cref="T:Rebex.Net.FtpState">Ready</see> state in other cases.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetDownloadStream(System.String)">
            <summary>
            Returns a Stream for reading data from the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <returns>A Stream for reading data from the remote file</returns>
            <remarks>
            <p>
            Due to the nature of FTP protocol, the stream is returned even
            if it is not possible to read from the remote file. However, an
            exception is thrown during the first read operation.
            </p>
            <p>
            <b>CAUTION:</b> The FTP stream uses a background thread to transfer data.
            It is therefore necessary to call the <see cref="M:System.IO.Stream.Close">Close</see> method of the stream as soon
            as the transfer is finished. Failure to close the stream will cause the
            thread to remain running in the background.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetUploadStream(System.String)">
            <summary>
            Returns a Stream for writing data to the remote file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <returns>A Stream for writing data to the remote file</returns>
            <remarks>
            <p>
            Due to the nature of FTP protocol, the stream is returned even
            if it is not possible to write to the remote file. However, an
            exception is thrown during the first write operation.
            </p>
            <p>
            <b>CAUTION:</b> The FTP stream uses a background thread to transfer data.
            It is therefore necessary to call the <see cref="M:System.IO.Stream.Close">Close</see> method of the stream as soon
            as the transfer is finished. Failure to close the stream will cause the
            thread to remain running in the background.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Abort">
            <summary>
            Cancels an asynchronous request started by any of Begin... methods.
            </summary>
            <remarks>
            <p>
            Asynchronous operation need not end immediately.
            It will finish within the interval specified by <see cref="P:Rebex.Net.Ftp.AbortTimeout">AbortTimeout</see>.
            Exceptions are date transfering asynchronous operations (including
            <see cref="M:Rebex.Net.Ftp.GetList"/>, <see cref="M:Rebex.Net.Ftp.GetRawList(System.String)"/> and
            <see cref="M:Rebex.Net.Ftp.GetNameList(System.String)"/>), which may take twice the amount
            of time specified by <see cref="P:Rebex.Net.Ftp.AbortTimeout"/>.
            </p>
            <p>
            After a call to Abort method, the <see cref="T:Rebex.Net.Ftp"/> object may remain
            in <see cref="T:Rebex.Net.FtpState">Reading</see>, <see cref="T:Rebex.Net.FtpState">Sending</see>
            or <see cref="T:Rebex.Net.FtpState">Processing</see> state. Call <see cref="M:Rebex.Net.Ftp.Flush(System.Int32)"/>
            to get back to the <see cref="T:Rebex.Net.FtpState">Ready</see> state.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Flush(System.Int32)">
            <summary>
            Reads and returns control connection data if any.
            </summary>
            <param name="timeLimit">The length of time (in milliseconds) to wait for data to be received.</param>
            <returns><see cref="T:Rebex.Net.FtpResponse">FtpResponse</see> if data was read or <b>null</b> reference if no data was read.</returns>
            <remarks>
            <p>
            Reads and returns any control connection data that might have remained
            unread after an asynchronouos operation aborted by a call to <see cref="M:Rebex.Net.Ftp.Abort">Abort</see> method.
            </p>
            <p>
            It can also be used to read FTP server messages that are not responses
            to any commands.
            </p>
            <p>
            If the state of the <see cref="T:Rebex.Net.Ftp"/> object is <see cref="T:Rebex.Net.FtpState">Ready</see> and no data is available,
            this method returns immediately with a <b>null</b> reference.
            If the state of the Ftp object is <see cref="T:Rebex.Net.FtpState">Reading</see>,
            <see cref="T:Rebex.Net.FtpState">Sending</see> or
            <see cref="T:Rebex.Net.FtpState">Processing</see> and no data
            is available within the specified time limit, it returns
            with a <b>null</b> reference. If data is available, it is read
            and returned. If the object is in any other state, an exception is thrown.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.KeepAlive">
            <summary>
            Sends the NOOP command to the server to keep the connection alive.
            </summary>
            <remarks>
            <p>Represents FTP NOOP command.</p>
            <p>Call this if you do not want the connection to the server to time out.</p>
            <p>Some servers ignore NOOP command.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetRawList">
            <summary>
            Retrieves the raw list of files and directories in the current server directory.
            </summary>
            <returns>The array of response lines.</returns>
            <remarks>
            <p>Represents FTP LIST command.</p>
            <p>
            Because the RFC does not define the format of the file list, this method
            is often useless. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetNameList">
            <summary>
            Retrieves the list of names in the current server directory.
            </summary>
            <returns>An array of names.</returns>
            <remarks>
            <p>Represents FTP NLST command.</p>
            <p>
            Actual behaviour of NLST command varies from server to server,
            because the RFC is not clear in explaining what it should do. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetSystemName">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <returns>The name of the remote OS.</returns>
            <remarks>
            <p>Represents FTP SYST command.</p>
            <p>Some servers do not support SYST command and most servers return very inaccurate responses.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.Connect(System.String)">
            <summary>
            Connects to the FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <returns>Welcome message returned by the server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.Site(System.String)">
            <summary>
            Executes site-specific command and returns the response.
            </summary>
            <param name="command">Site-specific command.</param>
            <returns>Command-specific response.</returns>
            <remarks>
            <p>Represents FTP SITE command.</p>
            <p>Using <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)">SendCommand</see>
            and <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see>
            method might be a better choice in some cases.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.DeleteFile(System.String)">
            <summary>
            Deletes the file on the server,
            </summary>
            <param name="remotePath">The pathname of the file to be deleted. Either an absolute pathname or relative to the current working directory.</param>
            <remarks>Represents FTP DELE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory on the server.
            </summary>
            <param name="remotePath">Pathname of the directory to change to.</param>
            <remarks>
            <p>Implemented using FTP CWD command for pathnames not equal to ".." and CDUP command for ".." pathnames. "." pathnames are ignored.</p>
            <p>
            Caution: some uncommon servers do not use a slash as a directory separator.
            Do not use slashes in the path to remain compatible with such servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote directory.</param>
            <returns>A string containing the absolute path of the newly created remote directory if the server complies to RFC 959; otherwise, <b>null</b> reference is returned.</returns>
            <remarks>
            <p>
            Represents FTP MKD command.
            </p>
            <p>
            <b>CAUTION:</b> RFC states that successful reply to the MKD command
            must always contain the absolute path of the created directory.
            However, many FTP servers do not comply to this requirement, for example
            wu-ftpd 2.4.2, (which is still widely used, although newer releases
            fixed this bug). Therefore, when the response is unparsable, this method
            returns a <b>null</b> reference instead of throwing an exception.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.RemoveDirectory(System.String)">
            <summary>
            Deletes an empty remote directory with the specified pathname.
            </summary>
            <param name="remotePath">Remote directory pathname.</param>
            <remarks>Represents FTP RMD command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetCurrentDirectory">
            <summary>
            Gets the absolute path of the current working directory on the remote server.
            </summary>
            <returns>A string containing the absolute path of the current working remote directory.</returns>
            <remarks>
            <p>Represents FTP PWD command.</p>
            <p>
            Some servers (eg. TOPS-20) do not support this method.
            <see cref="T:Rebex.Net.FtpException"/> with status of
            <see cref="T:Rebex.Net.FtpExceptionStatus">FtpExceptionStatus.ProtocolError</see>
            and code of 550 is thrown if this is the case.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFileLength(System.String)">
            <summary>
            Returns the size of the specified remote file.
            </summary>
            <param name="remotePath">Remote file pathname.</param>
            <returns>The size of the specified file in bytes.</returns>
            <remarks>
            <p>Represents FTP SIZE command.</p>
            <p>The SIZE command was not defined by the original RFC, but it has been widely supported for a number of years.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFileDateTime(System.String)">
            <summary>
            Returns the modification date and time of the specified remote file.
            </summary>
            <param name="remotePath">Remote file pathname.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to date and time that the specified file was modified.</returns>
            <remarks>
            <p>Represents FTP MDTM command.</p>
            <p>The MDTM command was not defined by the original RFC, but it has been widely supported for a number of years.</p>
            <p>Some servers return times in their local time zones, some use GMT.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutFile(System.IO.Stream,System.String)">
            <summary>
            Uploads the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutFile(System.String,System.String)">
            <summary>
            Uploads the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutFile(System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Uploads the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.PutFile(System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Uploads the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.AppendFile(System.IO.Stream,System.String)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.AppendFile(System.String,System.String)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.AppendFile(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.AppendFile(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFile(System.String,System.IO.Stream)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetFile(System.String,System.String)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <returns>Number of bytes transfered.</returns>
            <remarks>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            To obtain the current working directory, see <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory"/>.
            </p>
            <p>
            If the specified file does not exist, it is created; if it does exist,
            it is truncated and overwritten.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.GetList">
            <summary>
            Returns parsed list of files and directories in the current server directory.
            </summary>
            <returns>An instance of <see cref="T:Rebex.Net.FtpList"/> containing the file list.</returns>
            <remarks>See <see cref="E:Rebex.Net.FtpItem.ItemParse"/> for information on using custom list parsers.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Informs the server that the connection is about to close and
            terminates the connection.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP QUIT command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The exit message returned by the server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Renames a file on the server.
            </summary>
            <param name="fromPath">The pathname of the remote file to be renamed.</param>
            <param name="toPath">The pathname to rename the file to.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP RNFR/RNTO command pair.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndRename(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous rename operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetRawList(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Retrieves the raw list of files and directories in the current server directory.
            </summary>
            <param name="arguments">Arguments for the LIST command.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP LIST command.</p>
            <p>
            Because the RFC does not define the format of the file list,
            this method is often useless. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            <p>
            <b>Caution:</b> The meaning of the <i>arguments</i> argument is not defined by RFC
            and varies from server to server. Some servers interpret it as parameters
            to dir command, some as a filename, some ignore it and some report an error.
            Calling this method with <i>arguments</i> other than null is not
            recommended and will make your code incompatible with many FTP servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetRawList(System.AsyncCallback,System.Object)">
            <summary>
            Retrieves the raw list of files and directories in the current server directory.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP LIST command.</p>
            <p>
            Because the RFC does not define the format of the file list,
            this method is often useless. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetRawList(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The array of response lines.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetList(System.AsyncCallback,System.Object)">
            <summary>
            Returns parsed list of files and directories in the current server directory.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>See <see cref="E:Rebex.Net.FtpItem.ItemParse"/> for information on using custom list parsers.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetList(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An instance of <see cref="T:Rebex.Net.FtpList"/> containing the file list.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetNameList(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Retrieves the list of names in the current server directory.
            </summary>
            <param name="arguments">Arguments for the NLST command.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP NLST command.</p>
            <p>
            Actual behaviour of NLST command varies from server to server,
            because the RFC is not clear in explaining what it should do. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            <p>
            <b>Caution:</b> The meaning of the <i>arguments</i> argument is not defined by RFC
            and varies from server to server. Some servers interpret it as parameters
            to ls command, some as a filename, some ignore it and some report an error.
            Calling this method with <i>arguments</i> other than null is not
            recommended and will make your code incompatible with many FTP servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetNameList(System.AsyncCallback,System.Object)">
            <summary>
            Retrieves the list of names in the current server directory.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP NLST command.</p>
            <p>
            Actual behaviour of NLST command varies from server to server,
            because the RFC is not clear in explaining what it should do. 
            Some servers return the names of both files and directories, others
            return files only or even report error if the current directory
            is empty. Using <see cref="M:Rebex.Net.Ftp.GetList">GetList</see> is a better
            choice in most cases.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetNameList(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>An array of names.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginLogin(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Authenticates the user to the FTP server.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">Password for the given username.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP USER/PASS command pair.</p>
            <p>For anonymous logins, use "anonymous" as a username and an email as a password.</p>
            <p>If userName is a <b>null</b> reference, "anonymous" is used. If password is a <b>null</b> reference, "guest" is used.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndLogin(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous login.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The logon message returned by the remote server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Connects to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (eg. 21).</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Connects to an FTP server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connect.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The welcome message returned by the server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginSetTransferType(Rebex.Net.FtpTransferType,System.AsyncCallback,System.Object)">
            <summary>
            Sets the data transfer type.
            </summary>
            <param name="transferType">Transfer type to set.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP TYPE command.</p>
            <p>Setting this to <see cref="T:Rebex.Net.FtpTransferType">FtpTransferType.Binary</see> is highly recommended.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndSetTransferType(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Executes a command on the FTP server.
            </summary>
            <param name="command">Command (eg. "HELP").</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>The BeginSendCommand/<see cref="M:Rebex.Net.Ftp.EndSendCommand(System.IAsyncResult)"/> pair must be followed by a call to <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> or <see cref="M:Rebex.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)"/> methods.</p>
            <p>Use <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> or <see cref="M:Rebex.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)">BeginReadResponse</see> and <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)"/> or BeginSendCommand to implement various custom USER commands.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndSendCommand(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous command send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)">
            <summary>
            Returns the server response.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Must be preceeded by a call to <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)"/> method or <see cref="M:Rebex.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)"/>/<see cref="M:Rebex.Net.Ftp.EndSendCommand(System.IAsyncResult)"/> method pair.</p>
            <p>Use <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> or BeginReadResponse and <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)">SendCommand</see> or <see cref="M:Rebex.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)"/> to implement various custom USER commands.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndReadResponse(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous response read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Response of the FTP server.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginLogoff(System.AsyncCallback,System.Object)">
            <summary>
            Logoff the current user but do not close the connection.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP REIN command.</p>
            <p><see cref="M:Rebex.Net.Ftp.Login(System.String,System.String)"/> or <see cref="M:Rebex.Net.Ftp.BeginLogin(System.String,System.String,System.AsyncCallback,System.Object)"/> method can be called again after logoff.</p>
            <p><b>Caution:</b> This command is NOT needed to be called when closing connection - calling <see cref="M:Rebex.Net.Ftp.Disconnect"/> is enough.
            In fact, it is unsupported by some FTP servers and FTP proxies, so its usage
            is not recommended. Use <see cref="M:Rebex.Net.Ftp.Disconnect"/>/<see cref="M:Rebex.Net.Ftp.Connect(System.String,System.Int32)"/> instead.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndLogoff(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous logoff.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginKeepAlive(System.AsyncCallback,System.Object)">
            <summary>
            Sends the NOOP command to the server to keep the connection alive.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP NOOP command.</p>
            <p>Call this if you do not want the connection to the server to time out.</p>
            <p>Some servers ignore NOOP command.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndKeepAlive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous NOOP command.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetSystemName(System.AsyncCallback,System.Object)">
            <summary>
            Returns the name of the remote OS.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SYST command.</p>
            <p>Some servers do not support SYST command and most servers return very inaccurate responses.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetSystemName(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SYST command.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The name of the remote OS.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginSite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Executes site-specific command and returns the response.
            </summary>
            <param name="command">Site-specific command.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SITE command.</p>
            <p>Using <see cref="M:Rebex.Net.Ftp.SendCommand(System.String)"/> or <see cref="M:Rebex.Net.Ftp.BeginSendCommand(System.String,System.AsyncCallback,System.Object)"/> and <see cref="M:Rebex.Net.Ftp.ReadResponse">ReadResponse</see> or <see cref="M:Rebex.Net.Ftp.BeginReadResponse(System.AsyncCallback,System.Object)"/> methods might be a better choice in some cases.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndSite(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SITE command.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Command-specific response.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Deletes the file on the server,
            </summary>
            <param name="remotePath">The pathname of the file to be deleted. Either an absolute pathname or relative to the current working directory.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP DELE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous delete file operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginChangeDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Changes the current working directory on the server.
            </summary>
            <param name="remotePath">Pathname of the directory to change to.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Implemented using FTP CWD command for pathnames not equal to ".." and CDUP command for ".." pathnames. "." pathnames are ignored.</p>
            <p>
            Caution: some uncommon servers do not use a slash as a directory separator.
            Do not use slashes in the path to remain compatible with such servers.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndChangeDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Creates directory on the server.
            </summary>
            <param name="remotePath">Pathname of the new remote directory.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP MKD command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous directory creation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A string containing the absolute path of the newly created remote directory if the server complies to RFC 959; otherwise, <b>null</b> reference is returned.</returns>
            <remarks>
            <b>CAUTION:</b> RFC959 states that the successful reply to MKD command
            must always contain the absolute path of the created directory.
            However, many FTP servers do not comply to this requirement, for example
            wu-ftpd 2.4.2, which is still widely used, although newer releases
            fixed the problem. Therefore, when the response is unparsable, this method
            returns <b>null</b> reference instead of throwing an exception.
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginRemoveDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Deletes an empty remote directory with a specified pathname.
            </summary>
            <param name="remotePath">Remote directory pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP RMD command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndRemoveDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetCurrentDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Gets the absolute path of the current working directory on the remote server.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP PWD command.</p>
            Some servers (eg. TOPS-20) do not support this method.
            <see cref="T:Rebex.Net.FtpException"/> with status of
            <see cref="T:Rebex.Net.FtpExceptionStatus">FtpExceptionStatus.ProtocolError</see>
            and code of 550 is thrown if this is the case.
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetCurrentDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A string containing the absolute path of the current working remote directory.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFileLength(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns the size of the specified remote file.
            </summary>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP SIZE command.</p>
            <p>The SIZE command was not defined in the original RFC, but it has been widely supported for a number of years.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetFileLength(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous length request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The size of the specified file in bytes.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFileDateTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns the modification date and time of the specified remote file.
            </summary>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP MDTM command.</p>
            <p>The MDTM command was not defined in the original RFC, but it has been widely supported for a number of years.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetFileDateTime(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous datetime request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to date and time that the specified file was modified.</returns>
            <remarks>Some servers return times in their local time zones, some use GMT.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutFile(System.IO.Stream,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutFile(System.String,System.String,System.Int64,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP STOR command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndPutFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file upload.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transfered.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginAppendFile(System.String,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="length">Number of bytes to transfer or -1 to transfer the whole stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginAppendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the data stream to the file on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginAppendFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Appends the content of the local file to the file on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="remotePath">Remote file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>Represents FTP APPE command.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndAppendFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file append.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transfered.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutUniqueFile(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the data stream to the file with unique pathname on the server.
            </summary>
            <param name="sourceStream">The source data stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly (MS FTP).</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginPutUniqueFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Uploads the content of the local file to the file with unique pathname on the server.
            </summary>
            <param name="localPath">Local file pathname.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents the FTP STOU command.</p>
            <p>Use with caution - many servers do not support this and many servers support this incorrectly (MS FTP).</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndPutUniqueFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file upload.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Name of unique remote file.</returns>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFile(System.String,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP RETR command.</p>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            Use <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see> to obtain the current working directory.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFile(System.String,System.String,System.Int64,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="remoteOffset">The starting offset of the remote file.</param>
            <param name="localOffset">The starting offset in the local file.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>Represents FTP RETR command.</p>
            <p>If the specified local file does not exist, it is created; if it does exist and the local offset is greater than 0, the contents after the offset are overwritten.</p>
            <p>If the localOffset is less than or equal to zero and the file exists, it will be truncated to zero length before the transfer starts.</p>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            Use <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see> to obtain the current working directory.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the data stream.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="outputStream">The output stream.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>The path parameter can specify either relative or absolute path. Relative path is interpreted as relative to the current working directory. To obtain the current working directory, see <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.</remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.BeginGetFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Downloads the remote file to the local file.
            </summary>
            <param name="remotePath">The path of the remote file.</param>
            <param name="localPath">The path of the local file.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
            <remarks>
            <p>
            The path parameter can specify either relative or absolute path.
            Relative path is interpreted as relative to the current working directory.
            To obtain the current working directory, see <see cref="M:Rebex.Net.Ftp.GetCurrentDirectory">GetCurrentDirectory</see>.
            </p>
            <p>
            If the specified file does not exist, it is created; if it does exist,
            it is truncated and overwritten.
            </p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.Ftp.EndGetFile(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous file download.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>Number of bytes transfered.</returns>
        </member>
        <member name="E:Rebex.Net.Ftp.ResponseRead">
            <summary>
            Occurs when a response is received from the server.
            </summary>
        </member>
        <member name="E:Rebex.Net.Ftp.CommandSent">
            <summary>
            Occurs when a command is send to the server.
            </summary>
        </member>
        <member name="E:Rebex.Net.Ftp.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:Rebex.Net.Ftp"/> object is changed.
            </summary>
        </member>
        <member name="E:Rebex.Net.Ftp.TransferProgress">
            <summary>
            Occurs when data is send or received.
            </summary>
        </member>
        <member name="P:Rebex.Net.Ftp.Proxy">
            <summary>
            Gets or sets the network proxy to use to access a remote server.
            </summary>
            <value>The <see cref="T:Rebex.Net.FtpProxy"/> to use to access a remote server.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.TransferType">
            <summary>
            Gets the data transfer type.
            </summary>
            <value>The file transfer type. Default is <see cref="T:Rebex.Net.FtpTransferType">Ascii</see>.</value>
            <remarks>
            Use <see cref="M:Rebex.Net.Ftp.SetTransferType(Rebex.Net.FtpTransferType)">SetTransferType</see> to set the file transfer type.
            </remarks>
        </member>
        <member name="P:Rebex.Net.Ftp.Passive">
            <summary>
            Gets or sets a value which specifies the way data transfers are made.
            </summary>
            <value>The file transfer type. Default is true (passive).</value>
            <remarks>
            <p>Passive mode - data transfer connections are made by the client, which connects to the server.</p>
            <p>Active mode - data transfer connections are made by the server, which connects to the client.</p>
            <p>Firewalls and NATs often make it impossible to use active transfers.</p>
            <p>When using HTTP CONNECT proxy, this property is ignored and all transfers are passive.</p>
            </remarks>
        </member>
        <member name="P:Rebex.Net.Ftp.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out.
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The timeout does not apply to file transfer methods of the <see cref="T:Rebex.Net.Ftp"/>
            object, because these operations may take a very long time.
            </p>
            <p>
            Therefore, the timeout only applies to operations such as connecting to
            the server, waiting for response, and so on.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:Rebex.Net.Ftp.AbortTimeout">
            <summary>
            Gets or sets the length of time before the abort operation times out.
            </summary>
            <value>The length of time, in milliseconds, until the abort operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 3000, which seems to be a reasonable limit.
            </value>
            <remarks>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </remarks>
        </member>
        <member name="P:Rebex.Net.Ftp.State">
            <summary>
            Gets the current state of the <see cref="T:Rebex.Net.Ftp"/> object.
            </summary>
            <value>The current state.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.TransferState">
            <summary>
            Gets the current transfer state of the <see cref="T:Rebex.Net.Ftp"/> object.
            </summary>
            <value>The current transfer state.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.LocalEndPoint">
            <summary>
            Gets the local client <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The local client <see cref="T:System.Net.EndPoint"/>.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.RemoteEndPoint">
            <summary>
            Gets the remote server <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <value>The remote server <see cref="T:System.Net.EndPoint"/>.</value>
        </member>
        <member name="P:Rebex.Net.Ftp.Version">
            <summary>
            Returns the version of the FTP component.
            </summary>
            <value>The version of the FTP component.</value>
        </member>
        <member name="T:Rebex.Net.FtpTransferType">
            <summary>
            Type of transfer.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpTransferType.Ascii">
            <summary>Ascii</summary>
        </member>
        <member name="F:Rebex.Net.FtpTransferType.Binary">
            <summary>Binary</summary>
        </member>
        <member name="T:Rebex.Net.FtpState">
            <summary>
            State of the <see cref="T:Rebex.Net.Ftp"/> object.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Disconnected">
            <summary>Client is not connected.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Connecting">
            <summary>Connecting to server.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Ready">
            <summary>Server is ready and awaiting commands.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Sending">
            <summary>Sending command to the server.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Reading">
            <summary>Waiting for response or receiving response.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Processing">
            <summary>Received response is being processed.</summary>
        </member>
        <member name="F:Rebex.Net.FtpState.Disposed">
            <summary>Object is disposed and must not be used.</summary>
        </member>
        <member name="T:Rebex.Net.FtpTransferState">
            <summary>
            State of the FTP transfer.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpTransferState.None">
            <summary>No transfer pending.</summary>
        </member>
        <member name="F:Rebex.Net.FtpTransferState.Uploading">
            <summary>Uploading data.</summary>
        </member>
        <member name="F:Rebex.Net.FtpTransferState.Downloading">
            <summary>Downloading data.</summary>
        </member>
        <member name="T:Rebex.Net.FtpResponse">
            <summary>
            Contains the response of the FTP server.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpResponse.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpResponse"/> class with the specified code, description and raw response string.
            </summary>
            <param name="code">The FTP response code. Must be in range of 100 to 599.</param>
            <param name="description">The description of the response code.</param>
            <param name="raw">Raw FTP response.</param>
        </member>
        <member name="P:Rebex.Net.FtpResponse.Raw">
            <summary>
            Gets the full unparsed response of the FTP server.
            </summary>
            <value>The full unparsed response of the FTP server.</value>
        </member>
        <member name="P:Rebex.Net.FtpResponse.Description">
            <summary>
            Gets the description of the FTP response.
            </summary>
            <value>The description of the FTP response.</value>
        </member>
        <member name="P:Rebex.Net.FtpResponse.Code">
            <summary>
            Gets the FTP response code.
            </summary>
            <value>FTP response code.</value>
        </member>
        <member name="P:Rebex.Net.FtpResponse.Group">
            <summary>
            Gets the group of the FTP response code.
            </summary>
            <value>The group of the FTP response code.</value>
        </member>
        <member name="T:Rebex.Net.FtpParse">
            <summary>
            Provides methods for parsing FTP server responses.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpListParse">
            <summary>
            Static methods for FTP LIST parsing.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpProxyType">
            <summary>
            Type of proxy to use to connect to the network.
            </summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.None">
            <summary>Direct connection.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.Socks4">
            <summary>Connection through Socks4 proxy.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.Socks4a">
            <summary>Connection through Socks4A proxy (capable of resolving domain names).</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.Socks5">
            <summary>Connection through Socks5 proxy.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.HttpConnect">
            <summary>Connection through HTTP proxy using CONNECT method.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.FtpSite">
            <summary>Connection through FTP proxy using SITE command.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.FtpUser">
            <summary>Connection through FTP proxy using USER command.</summary>
        </member>
        <member name="F:Rebex.Net.FtpProxyType.FtpOpen">
            <summary>Connection through FTP proxy using OPEN command.</summary>
        </member>
        <member name="T:Rebex.Net.FtpProxy">
            <summary>
            Contains HTTP proxy settings for <see cref="T:Rebex.Net.Ftp"/> and <see cref="T:Rebex.Net.FtpWebRequest"/> classes.
            </summary>
        </member>
        <member name="M:Rebex.Net.FtpProxy.GetProxy(System.Uri)">
            <summary>
            Returns the proxied URI for a destination.
            </summary>
            <param name="destination">The <see cref="T:System.Uri"/> of the requested FTP server.</param>
            <returns>The <see cref="T:System.Uri"/> of the FTP server if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri"/> of the proxy.</returns>
        </member>
        <member name="M:Rebex.Net.FtpProxy.IsBypassed(System.Uri)">
            <summary>
            Indicates whether to use the proxy server for the specified FTP server.
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> of the FTP servr to check for proxy use.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rebex.Net.FtpProxy.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:System.Net.WebProxy"/> class.
            </summary>
            <remarks>
            The default constructor initializes an empty instance of the <see cref="T:Rebex.Net.FtpProxy"/>
            class with the <see cref="P:Rebex.Net.FtpProxy.ProxyType"/> property set to <see cref="T:Rebex.Net.FtpProxyType">FtpProxyType.None</see>.
            When the <see cref="P:Rebex.Net.FtpProxy.ProxyType"/> is set to <see cref="T:Rebex.Net.FtpProxyType">FtpProxyType.None</see>, the <see cref="M:Rebex.Net.FtpProxy.IsBypassed(System.Uri)"/> method
            returns <b>true</b>, and the <see cref="M:Rebex.Net.FtpProxy.GetProxy(System.Uri)"/> method returns the destination address.
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpProxy.#ctor(Rebex.Net.FtpProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpProxy"/> class with the specified type, hostname, and port.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:Rebex.Net.FtpProxy.#ctor(Rebex.Net.FtpProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpProxy"/> class with the specified type, hostname, port, and username.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:Rebex.Net.FtpProxy.#ctor(Rebex.Net.FtpProxyType,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpProxy"/> class with the specified type, hostname, port, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:Rebex.Net.FtpProxy.#ctor(Rebex.Net.FtpProxyType,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebex.Net.FtpProxy"/> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="P:Rebex.Net.FtpProxy.Host">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:Rebex.Net.FtpProxy.Port">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:Rebex.Net.FtpProxy.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:Rebex.Net.FtpProxy.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials"/> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential"/> are supported.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpProxy.UserName">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:Rebex.Net.FtpProxy.Password">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:Rebex.Net.FtpProxy.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy server for local addresses.
            </summary>
            <value><b>true</b> to bypass the proxy server for local addresses; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="T:Rebex.Net.FtpStream">
            <summary>
            Base class for FTP streams.
            </summary>
        </member>
        <member name="T:Rebex.Net.FtpWebRequest">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            <example>
            The following example demonstrates how to use FtpWebResponse.
            <pre class="code">
            // Registers FtpWebRequest for the specified schema.
            WebRequest.RegisterPrefix ("ftp://", FtpWebRequest.Creator);
            // Creates a WebRequest for the specified URL. 
            WebRequest request = WebRequest.Create (url);
            // Sends the WebRequest and waits for a response.
            WebResponse response = request.GetResponse();
            Console.WriteLine("\nResponse Received. Trying to Close the response stream...");
            // Releases the resources of the response.
            response.Close();
            Console.WriteLine("\nResponse Stream successfully closed");
            </pre>
            </example>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.Abort">
            <summary>
            Cancels an asynchronous FTP request.
            </summary>
            <remarks>
            Abort cancels an asynchronous FTP request. After a request is canceled, calling
            <see cref="M:Rebex.Net.FtpWebRequest.GetResponse"/>, <see cref="M:Rebex.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/>, <see cref="M:Rebex.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)"/>, <see cref="M:Rebex.Net.FtpWebRequest.GetRequestStream"/>,
            <see cref="M:Rebex.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/>, or <see cref="M:Rebex.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)"/> will cause a <see cref="T:System.Net.WebException"/>
            with <see cref="P:System.Net.WebException.Status">Status</see> set to <see cref="T:System.Net.WebExceptionStatus">RequestCanceled</see>.
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a <see cref="T:System.IO.Stream"/> instance to use to write data.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous request for a <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, returns the <see cref="T:System.IO.Stream"/> to use to write data.</returns>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> instance to use to write request data.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> to use to write request data.</returns>
            <remarks>
            <p>The <see cref="M:Rebex.Net.FtpWebRequest.GetRequestStream"/> method returns a stream to use to send data for the <see cref="T:Rebex.Net.FtpWebRequest"/>. Once the <see cref="T:System.IO.Stream"/> instance has been returned, you can send data with the <see cref="T:Rebex.Net.FtpWebRequest"/> by using the <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> method.</p>
            <p><b>Note:</b> Unlike <see cref="T:System.Net.HttpWebRequest"/>, you do not have to set the value of the <see cref="P:Rebex.Net.FtpWebRequest.ContentLength"/> property before writing data to the stream. <see cref="P:Rebex.Net.FtpWebRequest.ContentLength"/> is ignored.</p>
            <p><b>CAUTION:</b> You must call the <see cref="M:System.IO.Stream.Close"/> method to close the stream and release the connection for reuse. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a <see cref="T:Rebex.Net.FtpWebResponse"/> instance to use to write data.
            </summary>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous request for a <see cref="T:Rebex.Net.FtpWebResponse"/> instance.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, returns the <see cref="T:System.Net.WebResponse"/>.</returns>
        </member>
        <member name="M:Rebex.Net.FtpWebRequest.GetResponse">
            <summary>
            Returns <see cref="T:System.Net.WebResponse"/> instance to use to write data.
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> containing the response.</returns>
            <remarks>
            The actual instance returned is an instance of <see cref="T:Rebex.Net.FtpWebResponse"/>, and can be typecast to that class.
            </remarks>
        </member>
        <member name="E:Rebex.Net.FtpWebRequest.ResponseRead">
            <summary>
            Occurs when a response is received from the server.
            </summary>
        </member>
        <member name="E:Rebex.Net.FtpWebRequest.CommandSent">
            <summary>
            Occurs when a command is send to the server.
            </summary>
        </member>
        <member name="E:Rebex.Net.FtpWebRequest.StateChanged">
            <summary>
            Occurs when the state of the <see cref="T:Rebex.Net.Ftp"/> object is changed.
            </summary>
        </member>
        <member name="E:Rebex.Net.FtpWebRequest.TransferProgress">
            <summary>
            Occurs when data is send or received.
            </summary>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Creator">
            <summary>
            Gets the instance of IWebRequestCreate for registering with WebRequest.Create.
            </summary>
            <value>The instance of IWebRequestCreate</value>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.ContentLength">
            <summary>
            Gets or sets the Content-length HTTP header.
            </summary>
            <value>Not supported.</value>
            <remarks>Not supported by <see cref="T:Rebex.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.ContentType">
            <summary>
            Gets or sets the value of the Content-type HTTP header.
            </summary>
            <value>The value of the Content-type HTTP header.</value>
            <remarks>Not used by <see cref="T:Rebex.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials"/> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential"/> are supported by <see cref="T:Rebex.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            <value>The <see cref="T:Rebex.Net.FtpProxy"/> instance to use to proxy the request.</value>
            <remarks>
            <p>
            The Proxy property identifies the <see cref="T:Rebex.Net.FtpProxy"/> instance to use to process
            requests to Internet resources. To specify that no proxy should be used,
            set the Proxy property to the proxy instance returned by
            the <see cref="M:System.Net.GlobalProxySelection.GetEmptyWebProxy"/> method.
            </p>
            <p>
            If this property is not set to an instance of <see cref="T:Rebex.Net.FtpProxy"/>, it is ignored.
            </p>
            </remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Headers">
            <summary>
            Gets or sets a collection of the name/value pairs that make up the HTTP headers.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> containing the name/value pairs that make up the headers for the HTTP request.</value>
            <remarks>Not used by <see cref="T:Rebex.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Method">
            <summary>
            Gets or sets the method for the request.
            </summary>
            <value>The method for the request.</value>
            <remarks>
            <p>The Method property can be set to either RETR or STOR command. PUT and GET are also supported for compatibility with HttpWebRequest.</p>
            <p>Changing the Method property after the request has been started by calling <see cref="M:Rebex.Net.FtpWebRequest.GetRequestStream"/>, <see cref="M:Rebex.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/>, <see cref="M:Rebex.Net.FtpWebRequest.GetResponse"/>, or <see cref="M:Rebex.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method will throw an <see cref="T:System.InvalidOperationException"/>.</p>
            </remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.PreAuthenticate">
            <summary>
            Gets or sets a value indicating whether to send a preauthentication header with the request.
            </summary>
            <value>true to send a <b>WWW-authenticate</b> HTTP header with the initial request; otherwise, <b>false</b>. The default is <b>false</b>.</value>
            <remarks>Not used by <see cref="T:Rebex.Net.FtpWebRequest"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.RequestUri">
            <summary>
            Gets the URI of the request.
            </summary>
            <value>A <see cref="T:System.Uri"/> containing the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"/> method.</value>
        </member>
        <member name="P:Rebex.Net.FtpWebRequest.Timeout">
            <summary>
            Gets or sets the time-out value for a request.
            </summary>
            <remarks>
            <p>
            The length of time, in milliseconds, until the request times out,
            or the value of -1 or 0 to indicate that the
            request does not time out. Default is -1.
            </p>
            <p>
            Timeout is the number of milliseconds that a synchronous request made
            with the <see cref="M:Rebex.Net.FtpWebRequest.GetResponse"/> method waits for a response, and the <see cref="M:Rebex.Net.FtpWebRequest.GetRequestStream"/>
            methods waits for a stream. If a resource does not respond within
            the time-out period, the request throws a <see cref="T:System.Net.WebException"/> with the <see cref="T:System.Net.WebExceptionStatus">Status</see>
            property set to <see cref="T:System.Net.WebExceptionStatus">Timeout</see>.
            </p>
            <p>
            The Timeout property has no effect on asynchronous requests made with
            the <see cref="M:Rebex.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> or <see cref="M:Rebex.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/> methods.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="T:Rebex.Net.FtpWebResponse">
            <summary>
            Provides an FTP-specific implementation of the <see cref="T:System.Net.WebResponse"/> class.
            </summary>
            <remarks>
            The <see cref="T:Rebex.Net.FtpWebResponse"/> class contains support for the properties
            and methods included in <see cref="T:System.Net.WebResponse"/>.
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpWebResponse.GetResponseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> used to read the body of the response from the server.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> user to read the body of the response.</returns>
            <remarks>
            <p><b>CAUTION:</b> You must call either the <see cref="M:System.IO.Stream.Close"/> or the FtpWebResponse.Close method to close the stream and release the connection for reuse. It is not necessary to call both Stream.Close and FtpWebResponse.Close, but doing so does not cause an error. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="M:Rebex.Net.FtpWebResponse.Close">
            <summary>
            Closes the response stream.
            </summary>
            <remarks>
            <p>The Close method closes the response stream and releases the connection to the FTP server for reuse by other requests</p>
            <p><b>CAUTION:</b> You must call either the <see cref="M:System.IO.Stream.Close"/> or the FtpWebResponse.Close method to close the stream and release the connection for reuse. It is not necessary to call both Stream.Close and FtpWebResponse.Close, but doing so does not cause an error. Failure to close the stream will cause it to remain open and your application may run out of connections.</p>
            </remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebResponse.ContentLength">
            <summary>
            Gets the length of the content returned by the request.
            </summary>
            <value>The number of bytes returned by the request.</value>
            <remarks>Not supported by <see cref="T:Rebex.Net.FtpWebResponse"/>.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebResponse.ContentType">
            <summary>
            Gets the content type of the response.
            </summary>
            <value>A content type of the response.</value>
            <remarks><see cref="T:Rebex.Net.FtpWebResponse"/> always returns "binary/octet-stream".</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebResponse.Headers">
            <summary>
            Gets the headers associated with this response from the server.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> containing the header information returned with the response.</value>
            <remarks><see cref="T:Rebex.Net.FtpWebResponse"/> always returns an empty collection.</remarks>
        </member>
        <member name="P:Rebex.Net.FtpWebResponse.ResponseUri">
            <summary>
            Gets the URI of the request.
            </summary>
            <value>A URI of the request.</value>
        </member>
        <member name="T:Rebex.Net.FtpWebStream">
            <summary>
            Encapsulation of FTP stream.
            </summary>
        </member>
        <member name="T:Rebex.Net.Messages">
            <summary>
            Provides methods for constructing exception messages.
            </summary>
        </member>
        <member name="T:Rebex.Net.RebexAsyncResult">
            <summary>
            Universal class for asynchronous method invocation.
            </summary>
        </member>
    </members>
</doc>
